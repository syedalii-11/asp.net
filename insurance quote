1. Modify InsureeController to Calculate the Quote
In your InsureeController.cs, you'll need to update the Create action to calculate the quote based on the provided rules before saving the Insuree object to the database.

Update the Create Method in InsureeController.cs
csharp
Copy
Edit
[HttpPost]
[ValidateAntiForgeryToken]
public ActionResult Create(Insuree insuree)
{
    if (ModelState.IsValid)
    {
        // Call the method to calculate the quote
        insuree.Quote = CalculateQuote(insuree);
        
        db.Insurees.Add(insuree);
        db.SaveChanges();
        
        return RedirectToAction("Index");
    }

    return View(insuree);
}
2. Implement CalculateQuote Method
Add this method inside InsureeController to handle the pricing logic.

csharp
Copy
Edit
private decimal CalculateQuote(Insuree insuree)
{
    decimal basePrice = 50m;

    // Age-based pricing
    int age = DateTime.Now.Year - insuree.DateOfBirth.Year;
    if (insuree.DateOfBirth > DateTime.Now.AddYears(-age)) age--; // Adjust for birth date

    if (age <= 18) basePrice += 100m;
    else if (age >= 19 && age <= 25) basePrice += 50m;
    else basePrice += 25m;

    // Car year pricing
    if (insuree.CarYear < 2000) basePrice += 25m;
    if (insuree.CarYear > 2015) basePrice += 25m;

    // Car make & model pricing
    if (insuree.CarMake.ToLower() == "porsche") 
    {
        basePrice += 25m;
        if (insuree.CarModel.ToLower() == "911 carrera") 
        {
            basePrice += 25m;
        }
    }

    // Speeding tickets
    basePrice += insuree.SpeedingTickets * 10m;

    // DUI surcharge (25% increase)
    if (insuree.HasDUI) basePrice *= 1.25m;

    // Full coverage surcharge (50% increase)
    if (insuree.CoverageType.ToLower() == "full") basePrice *= 1.5m;

    return basePrice;
}
Ensure that CarMake, CarModel, and CoverageType are stored as string in your model.

3. Modify the Create View
You need to hide the Quote input field so that users donâ€™t manually enter it.

Update Create.cshtml (Views/Insuree/Create.cshtml)
Find this line:

html
Copy
Edit
<div class="form-group">
    @Html.LabelFor(model => model.Quote, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.Quote, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Quote, "", new { @class = "text-danger" })
    </div>
</div>
Replace it with this:

html
Copy
Edit
@Html.HiddenFor(model => model.Quote)
This ensures the quote is calculated in the backend and stored in the database, but not displayed in the form.

4. Create an Admin View to Show All Quotes
Now, create an Admin View that displays all issued quotes along with user details.

Update InsureeController.cs
Add this action method:

csharp
Copy
Edit
public ActionResult Admin()
{
    var insurees = db.Insurees.ToList();
    return View(insurees);
}
Create Admin.cshtml in Views/Insuree/
Go to Views/Insuree/ and create a new view Admin.cshtml. Then, add this code:

html
Copy
Edit
@model IEnumerable<YourNamespace.Models.Insuree>

@{
    ViewBag.Title = "Admin View";
}

<h2>Admin View - All Quotes</h2>

<table class="table">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Quote</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.Email</td>
                <td>@item.Quote.ToString("C")</td>
            </tr>
        }
    </tbody>
</table>
Replace YourNamespace.Models.Insuree with your actual namespace.

