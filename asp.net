Add Logic to Calculate the Quote
 

Go to the InsureeController.cs and update the Create action (POST method):

 

using System;

using System.Linq;

using System.Web.Mvc;

using YourNamespace.Models; // Replace with your actual namespace

 

public class InsureeController : Controller

{

    private InsuranceDbContext db = new InsuranceDbContext(); // Replace with your DbContext

 

    // POST: Insuree/Create

    [HttpPost]

    [ValidateAntiForgeryToken]

    public ActionResult Create([Bind(Include = "FirstName,LastName,EmailAddress,DateOfBirth,CarYear,CarMake,CarModel,SpeedingTickets,HasDUI,CoverageType")] Insuree insuree)

    {

        if (ModelState.IsValid)

        {

            insuree.Quote = CalculateQuote(insuree);

            db.Insurees.Add(insuree);

            db.SaveChanges();

            return RedirectToAction("Index");

        }

        return View(insuree);

    }

 

    private decimal CalculateQuote(Insuree insuree)

    {

        decimal quote = 50m; // Base price

 

        // Age-based calculation

        int age = DateTime.Now.Year - insuree.DateOfBirth.Year;

        if (insuree.DateOfBirth > DateTime.Now.AddYears(-age)) age--;

 

        if (age <= 18)

            quote += 100;

        else if (age >= 19 && age <= 25)

            quote += 50;

        else

            quote += 25;

 

        // Car year

        if (insuree.CarYear < 2000)

            quote += 25;

        if (insuree.CarYear > 2015)

            quote += 25;

 

        // Car make and model

        if (insuree.CarMake.ToLower() == "porsche")

        {

            quote += 25;

            if (insuree.CarModel.ToLower() == "911 carrera")

                quote += 25;

        }

 

        // Speeding tickets

        quote += insuree.SpeedingTickets * 10;

 

        // DUI

        if (insuree.HasDUI)

            quote += quote * 0.25m;

 

        // Coverage type (assuming "Full" indicates full coverage)

        if (insuree.CoverageType.ToLower() == "full")

            quote += quote * 0.5m;

 

        return quote;

    }

}

 

 

---

 

Modify the Create View
 

In Views/Insuree/Create.cshtml, remove the input field for Quote if it exists, or ensure it's hidden:

 

@model YourNamespace.Models.Insuree

 

@{

    ViewBag.Title = "Create";

}

 

<h2>Create Insuree</h2>

 

@using (Html.BeginForm()) 

{

    @Html.AntiForgeryToken()

 

    <div class="form-horizontal">

        <h4>Insuree</h4>

        <hr />

 

        @* First Name *@

        <div class="form-group">

            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })

            <div class="col-md-10">

                @Html.EditorFor(model => model.FirstName)

                @Html.ValidationMessageFor(model => model.FirstName)

            </div>

        </div>

 

        @* Repeat for other fields like LastName, EmailAddress, DateOfBirth, etc. *@

 

        @* Hiding the Quote field *@

        @Html.HiddenFor(model => model.Quote)

 

        <div class="form-group">

            <div class="col-md-offset-2 col-md-10">

                <input type="submit" value="Create" class="btn btn-default" />

            </div>

        </div>

    </div>

}

 

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")

}

 

 

---

 

Add an Admin View
 

In Views/Insuree, add a new view named Admin.cshtml:

 

@model IEnumerable<YourNamespace.Models.Insuree>

 

@{

    ViewBag.Title = "Admin View";

}

 

<h2>Admin Dashboard - All Quotes</h2>

 

<table class="table table-striped">

    <tr>

        <th>First Name</th>

        <th>Last Name</th>

        <th>Email Address</th>

        <th>Quote ($)</th>

    </tr>

 

@foreach (var item in Model) {

    <tr>

        <td>@item.FirstName</td>

        <td>@item.LastName</td>

        <td>@item.EmailAddress</td>

        <td>@item.Quote.ToString("F2")</td>

    </tr>

}

</table>

 

 

---

 

Add the Admin Action in Controller
 

public ActionResult Admin()

{

    var insurees = db.Insurees.ToList();

    return View(insurees);

}

 

 

---

 

Database Files (.mdf and .ldf)
 

Go to your projectâ€™s App_Data folder.

 

Locate the .mdf and .ldf files.
